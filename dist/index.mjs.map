{"version":3,"sources":["../src/components/ownership-modal.tsx","../src/hooks/use-page-ownership.tsx","../src/context/ownership-context.tsx","../src/hooks/use-owner.tsx","../src/utils.ts","../src/components/owner-badge.tsx","../src/adapters/local-storage.ts"],"sourcesContent":["import React from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { usePageOwnership } from \"../hooks/use-page-ownership\";\nimport type { PageOwner } from \"../types\";\n\ninterface OwnershipModalProps {\n  pageId: string;\n  tenant?: string;\n  onCancel?: () => void;\n  cancelText?: string;\n  initialIsOpen?: boolean;\n  initialCurrentOwner?: PageOwner | null;\n}\n\nexport default function OwnershipModal({\n  initialIsOpen,\n  initialCurrentOwner,\n  onCancel,\n  cancelText,\n  pageId,\n}: OwnershipModalProps) {\n  const router = useRouter();\n  const onClose = () => {\n    onCancel ? onCancel() : router.back();\n  };\n\n  const {\n    takeOwnership,\n    isOwnedByCurrentUser,\n    currentOwner: redisOwner,\n    isFetching,\n    isAttemptingOwnership,\n  } = usePageOwnership({\n    pageId,\n  });\n\n  const owner = redisOwner || initialCurrentOwner;\n  const isOpen = owner?.user_name ? !isOwnedByCurrentUser : initialIsOpen;\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n      <div className=\"bg-white p-6 rounded-lg shadow-lg max-w-lg w-full\">\n        <div className=\"space-y-4\">\n          <div>\n            <h2 className=\"text-lg font-semibold\">Take Ownership</h2>\n            <p className=\"text-gray-600\">\n              {owner?.user_name ? (\n                <>\n                  This page is currently owned by{\" \"}\n                  <strong>{owner.user_name}</strong>. Would you like to take\n                  ownership?\n                </>\n              ) : (\n                <>\n                  You are currently not the owner of this page. Would you like\n                  to take ownership?\n                </>\n              )}\n            </p>\n          </div>\n          <div className=\"flex justify-end space-x-2\">\n            <button\n              onClick={() => takeOwnership()}\n              disabled={isFetching}\n              className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50\"\n            >\n              {isAttemptingOwnership ? \"Taking ownership...\" : \"Take Ownership\"}\n            </button>\n            <button\n              onClick={onClose}\n              className=\"px-4 py-2 border border-gray-300 rounded hover:bg-gray-50\"\n            >\n              {cancelText || \"Cancel\"}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport type { PageOwner } from \"../types\";\nimport { useOwnershipContext } from \"../context/ownership-context\";\n\ninterface UsePageOwnershipProps {\n  pageId: string;\n  pollingInterval?: number;\n}\n\ninterface UsePageOwnershipResult {\n  currentOwner: PageOwner | null;\n  isFetching: boolean;\n  isAttemptingOwnership: boolean;\n  error: string | null;\n  isOwnedByCurrentUser: boolean;\n  lockPage: () => void;\n  unlockPage: () => void;\n  takeOwnership: () => void;\n  refreshOwnership: () => void;\n  lockedPages: Record<string, PageOwner> | undefined;\n}\n\nexport const usePageOwnership = ({\n  pageId,\n  pollingInterval,\n}: UsePageOwnershipProps): UsePageOwnershipResult => {\n  const { user, config, options } = useOwnershipContext();\n  const [currentOwner, setCurrentOwner] = useState<PageOwner | null>(null);\n  const [lockedPages, setLockedPages] = useState<Record<string, PageOwner>>();\n  const [isAttemptingOwnership, setIsAttemptingOwnership] = useState(false);\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const isAttemptingOwnershipInternalRef = useRef(false);\n  const previousPageIdRef = useRef<string | null>(pageId);\n  const currentOwnerRef = useRef<PageOwner | null>(null);\n  const pollingIntervalRef = useRef(\n    pollingInterval || options.pollingInterval\n  );\n\n  const userId = user?.id ?? \"\";\n  const userName = user?.email ?? \"\";\n\n  // Fetch all locked pages\n  const fetchLockedPages = useCallback(async () => {\n    try {\n      const pages = await config.ownershipAdapter.getAllPageOwners();\n      setLockedPages(pages);\n    } catch (err) {\n      console.error(\"Failed to fetch locked pages:\", err);\n    }\n  }, [config.ownershipAdapter]);\n\n  // Take ownership\n  const takeOwnership = useCallback(async () => {\n    console.log(\"takeOwnership\", isAttemptingOwnershipInternalRef.current);\n    if (isAttemptingOwnershipInternalRef.current) return;\n\n    try {\n      isAttemptingOwnershipInternalRef.current = true;\n      setIsAttemptingOwnership(true);\n      setError(null);\n      const owner = await config.ownershipAdapter.takePageOwnership(\n        pageId,\n        userId,\n        userName\n      );\n      setCurrentOwner(owner);\n      await fetchLockedPages();\n    } catch (err) {\n      setError(String(err));\n    } finally {\n      isAttemptingOwnershipInternalRef.current = false;\n      setIsAttemptingOwnership(false);\n    }\n  }, [config.ownershipAdapter, pageId, userId, userName]);\n\n  // Fetch current owner\n  const fetchOwner = useCallback(async () => {\n    try {\n      setIsFetching(true);\n      setError(null);\n      const owner = await config.ownershipAdapter.getPageOwner(pageId);\n      setCurrentOwner((prev) =>\n        !!prev && prev.user_id === owner?.user_id ? prev : owner\n      );\n\n      // Only attempt to take ownership if we're not already attempting it\n      if (!owner && !isAttemptingOwnershipInternalRef.current) {\n        try {\n          await takeOwnership();\n        } catch (err) {\n          setError(String(err));\n        }\n      }\n    } catch (err) {\n      setError(String(err));\n    } finally {\n      setIsFetching(false);\n    }\n  }, [config.ownershipAdapter, pageId, takeOwnership]);\n\n  // Set up polling\n  useEffect(() => {\n    fetchOwner();\n    fetchLockedPages();\n\n    const interval = setInterval(() => {\n      fetchOwner();\n      fetchLockedPages();\n    }, pollingIntervalRef.current);\n\n    return () => clearInterval(interval);\n  }, [pageId, pollingIntervalRef.current]);\n\n  // Lock page\n  const lockPage = useCallback(async () => {\n    try {\n      setIsFetching(true);\n      setError(null);\n      const owner = await config.ownershipAdapter.lockPage(\n        pageId,\n        userId,\n        userName\n      );\n      setCurrentOwner(owner);\n      await fetchLockedPages();\n    } catch (err) {\n      setError(String(err));\n    } finally {\n      setIsFetching(false);\n    }\n  }, [config.ownershipAdapter, pageId, userId, userName]);\n\n  // Unlock page\n  const unlockPage = async (page?: string | null) => {\n    try {\n      setIsFetching(true);\n      setError(null);\n      await config.ownershipAdapter.unlockPage(page || pageId, userId);\n      setCurrentOwner(null);\n      await fetchLockedPages();\n    } catch (err) {\n      setError(String(err));\n    } finally {\n      setIsFetching(false);\n    }\n  };\n\n  // Handle page changes\n  useEffect(() => {\n    if (pageId !== previousPageIdRef.current) {\n      if (currentOwner?.user_id === userId) {\n        unlockPage(previousPageIdRef.current);\n      }\n      previousPageIdRef.current = pageId;\n    }\n  }, [pageId]);\n\n  // Update ref whenever currentOwner changes\n  useEffect(() => {\n    currentOwnerRef.current = currentOwner;\n  }, [currentOwner]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (\n        previousPageIdRef.current &&\n        currentOwnerRef.current?.user_id === userId\n      ) {\n        unlockPage(previousPageIdRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    currentOwner,\n    isFetching,\n    isAttemptingOwnership,\n    error,\n    isOwnedByCurrentUser: currentOwner?.user_id === userId,\n    lockPage,\n    unlockPage,\n    takeOwnership,\n    refreshOwnership: fetchOwner,\n    lockedPages,\n  };\n};\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport type { User, UserAdapter, OwnershipAdapter, ApiAdapter } from \"../types\";\n\nexport interface OwnershipConfig {\n  /** User state adapter */\n  userAdapter: UserAdapter;\n  /** Ownership operations adapter */\n  ownershipAdapter: OwnershipAdapter;\n  /** API adapter */\n  apiAdapter?: ApiAdapter;\n  options?: {\n    /** Whether to use the local storage adapter */\n    pollingInterval?: number;\n  };\n}\n\ninterface OwnershipConfigOptions {\n  pollingInterval: number;\n}\n\ninterface OwnershipContextValue {\n  user: User | null;\n  config: OwnershipConfig;\n  options: OwnershipConfigOptions;\n}\n\nconst OwnershipContext = createContext<OwnershipContextValue | null>(null);\n\nexport interface OwnershipProviderProps {\n  children: React.ReactNode;\n  config: OwnershipConfig;\n}\n\nexport function OwnershipProvider({\n  children,\n  config,\n}: OwnershipProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n\n  // Initialize and subscribe to user changes\n  useEffect(() => {\n    const initUser = async () => {\n      const currentUser = await Promise.resolve(\n        config.userAdapter.getCurrentUser()\n      );\n      setUser(currentUser);\n    };\n    initUser();\n\n    // Subscribe to user changes if adapter provides subscription\n    if (config.userAdapter.subscribe) {\n      return config.userAdapter.subscribe(setUser);\n    }\n  }, [config.userAdapter]);\n\n  const value: OwnershipContextValue = {\n    user,\n    config,\n    options: {\n      pollingInterval: 3000,\n      ...config.options,\n    },\n  };\n\n  return (\n    <OwnershipContext.Provider value={value}>\n      {children}\n    </OwnershipContext.Provider>\n  );\n}\n\nexport function useOwnershipContext() {\n  const context = useContext(OwnershipContext);\n  if (!context) {\n    throw new Error(\n      \"useOwnershipContext must be used within an OwnershipProvider\"\n    );\n  }\n  return context;\n}\n","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport type { PageOwner } from \"../types\";\nimport { useOwnershipContext } from \"../context/ownership-context\";\n\ninterface UseOwnerProps {\n  pageId: string;\n  pollingInterval?: number;\n}\n\ninterface UseOwnerResult {\n  owner: PageOwner | null;\n  isFetching: boolean;\n  error: string | null;\n  refreshOwner: () => Promise<void>;\n}\n\nexport const useOwner = ({\n  pageId,\n  pollingInterval,\n}: UseOwnerProps): UseOwnerResult => {\n  const { config, options } = useOwnershipContext();\n  const [owner, setOwner] = useState<PageOwner | null>(null);\n  const [isFetching, setIsFetching] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const pollingIntervalRef = useRef(\n    pollingInterval || options.pollingInterval\n  );\n\n  const fetchOwner = useCallback(async () => {\n    try {\n      setIsFetching(true);\n      setError(null);\n      const currentOwner = await config.ownershipAdapter.getPageOwner(pageId);\n      setOwner(currentOwner);\n    } catch (err) {\n      setError(String(err));\n    } finally {\n      setIsFetching(false);\n    }\n  }, [config.ownershipAdapter, pageId]);\n\n  useEffect(() => {\n    fetchOwner();\n\n    const interval = setInterval(() => {\n      fetchOwner();\n    }, pollingInterval);\n\n    return () => clearInterval(interval);\n  }, [pageId, pollingInterval, fetchOwner]);\n\n  return {\n    owner,\n    isFetching,\n    error,\n    refreshOwner: fetchOwner,\n  };\n};\n","import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n} ","import React from \"react\";\nimport { useOwner } from \"../hooks/use-owner\";\nimport { cn } from \"../utils\";\n\ninterface OwnerBadgeProps {\n  pageId: string;\n  className?: string;\n}\n\nconst OwnerBadge = ({ pageId, className }: OwnerBadgeProps) => {\n  const { owner, isFetching } = useOwner({ pageId });\n\n  if (isFetching && !owner) {\n    return (\n      <div\n        className={cn(\n          \"inline-flex items-center gap-2 px-2 py-1 text-sm rounded-md bg-gray-100 text-gray-500 animate-pulse\",\n          className\n        )}\n      >\n        Loading...\n      </div>\n    );\n  }\n\n  if (!owner) {\n    return (\n      <div\n        className={cn(\n          \"inline-flex items-center gap-2 px-2 py-1 text-sm rounded-md bg-gray-100 text-gray-500\",\n          className\n        )}\n      >\n        No active owner\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={cn(\n        \"inline-flex items-center gap-2 px-2 py-1 text-sm rounded-md bg-blue-50 text-blue-700 border border-blue-100\",\n        className\n      )}\n    >\n      <div className=\"w-2 h-2 rounded-full bg-blue-500 animate-pulse\" />\n      <span>Owned by {owner.user_name}</span>\n    </div>\n  );\n};\n\nexport default OwnerBadge;","import type { OwnershipAdapter, PageOwner } from \"../types\";\n\nconst STORAGE_KEY = \"locksmith_page_owners\";\n\ninterface LocalStorageAdapterOptions {\n  /** Storage key prefix */\n  prefix?: string;\n}\n\nexport type StorageEventAction =\n  | \"getAllOwners\"\n  | \"lockPage\"\n  | \"unlockPage\"\n  | \"takePageOwnership\";\n\nexport interface StorageEventDetails {\n  action: StorageEventAction;\n  key: string;\n  newValue: string;\n  oldValue: string;\n  url: string;\n  storageArea: Storage;\n}\n\nexport function createLocalStorageAdapter(\n  options: LocalStorageAdapterOptions = {}\n): OwnershipAdapter {\n  const { prefix = \"locksmith\" } = options;\n  const storageKey = `${prefix}_page_owners`;\n\n  // Helper to get all owners from storage\n  const getAllOwners = (): Record<string, PageOwner> => {\n    if (typeof window === \"undefined\") return {};\n    const stored = window.localStorage.getItem(storageKey);\n    return stored ? JSON.parse(stored) : {};\n  };\n\n  // Helper to save owners to storage\n  const saveOwners = (owners: Record<string, PageOwner>) => {\n    if (typeof window === \"undefined\") return;\n    window.localStorage.setItem(storageKey, JSON.stringify(owners));\n  };\n\n  // Helper to dispatch storage events\n  const dispatchStorageEvent = (action: StorageEventAction, value: any) => {\n    if (typeof window === \"undefined\") return;\n    window.dispatchEvent(\n      new CustomEvent(\"storage-event\", {\n        detail: {\n          action,\n          key: storageKey,\n          newValue: JSON.stringify(value),\n          oldValue: JSON.stringify(value),\n          url: window.location.href,\n          storageArea: window.localStorage,\n        },\n      })\n    );\n  };\n\n  return {\n    getPageOwner: async (pageId) => {\n      const owners = getAllOwners();\n      return owners[pageId] || null;\n    },\n\n    getAllPageOwners: async () => {\n      const owners = getAllOwners();\n      dispatchStorageEvent(\"getAllOwners\", owners);\n      return owners;\n    },\n\n    lockPage: async (pageId, userId, userName) => {\n      const owner: PageOwner = {\n        page_id: pageId,\n        user_id: userId,\n        user_name: userName,\n        timestamp: Date.now(),\n      };\n\n      const owners = getAllOwners();\n      owners[pageId] = owner;\n      saveOwners(owners);\n      dispatchStorageEvent(\"lockPage\", owner);\n\n      return owner;\n    },\n\n    unlockPage: async (pageId, userId) => {\n      const owners = getAllOwners();\n      const owner = owners[pageId];\n\n      if (!owner || (owner && owner.user_id === userId)) {\n        delete owners[pageId];\n        saveOwners(owners);\n        dispatchStorageEvent(\"unlockPage\", { pageId, userId });\n      } else {\n        throw new Error(\"Not authorized to unlock this page\");\n      }\n    },\n\n    takePageOwnership: async (pageId, userId, userName) => {\n      const owner: PageOwner = {\n        page_id: pageId,\n        user_id: userId,\n        user_name: userName,\n        timestamp: Date.now(),\n      };\n\n      const owners = getAllOwners();\n      owners[pageId] = owner;\n      saveOwners(owners);\n      dispatchStorageEvent(\"takePageOwnership\", owner);\n\n      return owner;\n    },\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AACA,SAAS,iBAAiB;;;ACD1B,SAAS,aAAa,aAAAA,YAAW,QAAQ,YAAAC,iBAAgB;;;ACAzD,SAAgB,eAAe,YAAY,WAAW,gBAAgB;AAiElE;AAvCJ,IAAM,mBAAmB,cAA4C,IAAI;AAOlE,SAAS,kBAAkB;AAAA,EAChC;AAAA,EACA;AACF,GAA2B;AACzB,QAAM,CAAC,MAAM,OAAO,IAAI,SAAsB,IAAI;AAGlD,YAAU,MAAM;AACd,UAAM,WAAW,YAAY;AAC3B,YAAM,cAAc,MAAM,QAAQ;AAAA,QAChC,OAAO,YAAY,eAAe;AAAA,MACpC;AACA,cAAQ,WAAW;AAAA,IACrB;AACA,aAAS;AAGT,QAAI,OAAO,YAAY,WAAW;AAChC,aAAO,OAAO,YAAY,UAAU,OAAO;AAAA,IAC7C;AAAA,EACF,GAAG,CAAC,OAAO,WAAW,CAAC;AAEvB,QAAM,QAA+B;AAAA,IACnC;AAAA,IACA;AAAA,IACA,SAAS;AAAA,MACP,iBAAiB;AAAA,OACd,OAAO;AAAA,EAEd;AAEA,SACE,oBAAC,iBAAiB,UAAjB,EAA0B,OACxB,UACH;AAEJ;AAEO,SAAS,sBAAsB;AACpC,QAAM,UAAU,WAAW,gBAAgB;AAC3C,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;;;ADzDO,IAAM,mBAAmB,CAAC;AAAA,EAC/B;AAAA,EACA;AACF,MAAqD;AAzBrD;AA0BE,QAAM,EAAE,MAAM,QAAQ,QAAQ,IAAI,oBAAoB;AACtD,QAAM,CAAC,cAAc,eAAe,IAAIC,UAA2B,IAAI;AACvE,QAAM,CAAC,aAAa,cAAc,IAAIA,UAAoC;AAC1E,QAAM,CAAC,uBAAuB,wBAAwB,IAAIA,UAAS,KAAK;AACxE,QAAM,CAAC,YAAY,aAAa,IAAIA,UAAS,KAAK;AAClD,QAAM,CAAC,OAAO,QAAQ,IAAIA,UAAwB,IAAI;AACtD,QAAM,mCAAmC,OAAO,KAAK;AACrD,QAAM,oBAAoB,OAAsB,MAAM;AACtD,QAAM,kBAAkB,OAAyB,IAAI;AACrD,QAAM,qBAAqB;AAAA,IACzB,mBAAmB,QAAQ;AAAA,EAC7B;AAEA,QAAM,UAAS,kCAAM,OAAN,YAAY;AAC3B,QAAM,YAAW,kCAAM,UAAN,YAAe;AAGhC,QAAM,mBAAmB,YAAY,YAAY;AAC/C,QAAI;AACF,YAAM,QAAQ,MAAM,OAAO,iBAAiB,iBAAiB;AAC7D,qBAAe,KAAK;AAAA,IACtB,SAAS,KAAK;AACZ,cAAQ,MAAM,iCAAiC,GAAG;AAAA,IACpD;AAAA,EACF,GAAG,CAAC,OAAO,gBAAgB,CAAC;AAG5B,QAAM,gBAAgB,YAAY,YAAY;AAC5C,YAAQ,IAAI,iBAAiB,iCAAiC,OAAO;AACrE,QAAI,iCAAiC,QAAS;AAE9C,QAAI;AACF,uCAAiC,UAAU;AAC3C,+BAAyB,IAAI;AAC7B,eAAS,IAAI;AACb,YAAM,QAAQ,MAAM,OAAO,iBAAiB;AAAA,QAC1C;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,sBAAgB,KAAK;AACrB,YAAM,iBAAiB;AAAA,IACzB,SAAS,KAAK;AACZ,eAAS,OAAO,GAAG,CAAC;AAAA,IACtB,UAAE;AACA,uCAAiC,UAAU;AAC3C,+BAAyB,KAAK;AAAA,IAChC;AAAA,EACF,GAAG,CAAC,OAAO,kBAAkB,QAAQ,QAAQ,QAAQ,CAAC;AAGtD,QAAM,aAAa,YAAY,YAAY;AACzC,QAAI;AACF,oBAAc,IAAI;AAClB,eAAS,IAAI;AACb,YAAM,QAAQ,MAAM,OAAO,iBAAiB,aAAa,MAAM;AAC/D;AAAA,QAAgB,CAAC,SACf,CAAC,CAAC,QAAQ,KAAK,aAAY,+BAAO,WAAU,OAAO;AAAA,MACrD;AAGA,UAAI,CAAC,SAAS,CAAC,iCAAiC,SAAS;AACvD,YAAI;AACF,gBAAM,cAAc;AAAA,QACtB,SAAS,KAAK;AACZ,mBAAS,OAAO,GAAG,CAAC;AAAA,QACtB;AAAA,MACF;AAAA,IACF,SAAS,KAAK;AACZ,eAAS,OAAO,GAAG,CAAC;AAAA,IACtB,UAAE;AACA,oBAAc,KAAK;AAAA,IACrB;AAAA,EACF,GAAG,CAAC,OAAO,kBAAkB,QAAQ,aAAa,CAAC;AAGnD,EAAAC,WAAU,MAAM;AACd,eAAW;AACX,qBAAiB;AAEjB,UAAM,WAAW,YAAY,MAAM;AACjC,iBAAW;AACX,uBAAiB;AAAA,IACnB,GAAG,mBAAmB,OAAO;AAE7B,WAAO,MAAM,cAAc,QAAQ;AAAA,EACrC,GAAG,CAAC,QAAQ,mBAAmB,OAAO,CAAC;AAGvC,QAAM,WAAW,YAAY,YAAY;AACvC,QAAI;AACF,oBAAc,IAAI;AAClB,eAAS,IAAI;AACb,YAAM,QAAQ,MAAM,OAAO,iBAAiB;AAAA,QAC1C;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,sBAAgB,KAAK;AACrB,YAAM,iBAAiB;AAAA,IACzB,SAAS,KAAK;AACZ,eAAS,OAAO,GAAG,CAAC;AAAA,IACtB,UAAE;AACA,oBAAc,KAAK;AAAA,IACrB;AAAA,EACF,GAAG,CAAC,OAAO,kBAAkB,QAAQ,QAAQ,QAAQ,CAAC;AAGtD,QAAM,aAAa,OAAO,SAAyB;AACjD,QAAI;AACF,oBAAc,IAAI;AAClB,eAAS,IAAI;AACb,YAAM,OAAO,iBAAiB,WAAW,QAAQ,QAAQ,MAAM;AAC/D,sBAAgB,IAAI;AACpB,YAAM,iBAAiB;AAAA,IACzB,SAAS,KAAK;AACZ,eAAS,OAAO,GAAG,CAAC;AAAA,IACtB,UAAE;AACA,oBAAc,KAAK;AAAA,IACrB;AAAA,EACF;AAGA,EAAAA,WAAU,MAAM;AACd,QAAI,WAAW,kBAAkB,SAAS;AACxC,WAAI,6CAAc,aAAY,QAAQ;AACpC,mBAAW,kBAAkB,OAAO;AAAA,MACtC;AACA,wBAAkB,UAAU;AAAA,IAC9B;AAAA,EACF,GAAG,CAAC,MAAM,CAAC;AAGX,EAAAA,WAAU,MAAM;AACd,oBAAgB,UAAU;AAAA,EAC5B,GAAG,CAAC,YAAY,CAAC;AAGjB,EAAAA,WAAU,MAAM;AACd,WAAO,MAAM;AArKjB,UAAAC;AAsKM,UACE,kBAAkB,aAClBA,MAAA,gBAAgB,YAAhB,gBAAAA,IAAyB,aAAY,QACrC;AACA,mBAAW,kBAAkB,OAAO;AAAA,MACtC;AAAA,IACF;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,uBAAsB,6CAAc,aAAY;AAAA,IAChD;AAAA,IACA;AAAA,IACA;AAAA,IACA,kBAAkB;AAAA,IAClB;AAAA,EACF;AACF;;;AD7IY,SAGI,UAHJ,OAAAC,MAGI,YAHJ;AAhCG,SAAR,eAAgC;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAwB;AACtB,QAAM,SAAS,UAAU;AACzB,QAAM,UAAU,MAAM;AACpB,eAAW,SAAS,IAAI,OAAO,KAAK;AAAA,EACtC;AAEA,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA,cAAc;AAAA,IACd;AAAA,IACA;AAAA,EACF,IAAI,iBAAiB;AAAA,IACnB;AAAA,EACF,CAAC;AAED,QAAM,QAAQ,cAAc;AAC5B,QAAM,UAAS,+BAAO,aAAY,CAAC,uBAAuB;AAE1D,MAAI,CAAC,OAAQ,QAAO;AAEpB,SACE,gBAAAA,KAAC,SAAI,WAAU,iEACb,0BAAAA,KAAC,SAAI,WAAU,qDACb,+BAAC,SAAI,WAAU,aACb;AAAA,yBAAC,SACC;AAAA,sBAAAA,KAAC,QAAG,WAAU,yBAAwB,4BAAc;AAAA,MACpD,gBAAAA,KAAC,OAAE,WAAU,iBACV,0CAAO,aACN,iCAAE;AAAA;AAAA,QACgC;AAAA,QAChC,gBAAAA,KAAC,YAAQ,gBAAM,WAAU;AAAA,QAAS;AAAA,SAEpC,IAEA,gBAAAA,KAAA,YAAE,6FAGF,GAEJ;AAAA,OACF;AAAA,IACA,qBAAC,SAAI,WAAU,8BACb;AAAA,sBAAAA;AAAA,QAAC;AAAA;AAAA,UACC,SAAS,MAAM,cAAc;AAAA,UAC7B,UAAU;AAAA,UACV,WAAU;AAAA,UAET,kCAAwB,wBAAwB;AAAA;AAAA,MACnD;AAAA,MACA,gBAAAA;AAAA,QAAC;AAAA;AAAA,UACC,SAAS;AAAA,UACT,WAAU;AAAA,UAET,wBAAc;AAAA;AAAA,MACjB;AAAA,OACF;AAAA,KACF,GACF,GACF;AAEJ;;;AGjFA,SAAS,eAAAC,cAAa,aAAAC,YAAW,UAAAC,SAAQ,YAAAC,iBAAgB;AAgBlD,IAAM,WAAW,CAAC;AAAA,EACvB;AAAA,EACA;AACF,MAAqC;AACnC,QAAM,EAAE,QAAQ,QAAQ,IAAI,oBAAoB;AAChD,QAAM,CAAC,OAAO,QAAQ,IAAIC,UAA2B,IAAI;AACzD,QAAM,CAAC,YAAY,aAAa,IAAIA,UAAS,KAAK;AAClD,QAAM,CAAC,OAAO,QAAQ,IAAIA,UAAwB,IAAI;AACtD,QAAM,qBAAqBC;AAAA,IACzB,mBAAmB,QAAQ;AAAA,EAC7B;AAEA,QAAM,aAAaC,aAAY,YAAY;AACzC,QAAI;AACF,oBAAc,IAAI;AAClB,eAAS,IAAI;AACb,YAAM,eAAe,MAAM,OAAO,iBAAiB,aAAa,MAAM;AACtE,eAAS,YAAY;AAAA,IACvB,SAAS,KAAK;AACZ,eAAS,OAAO,GAAG,CAAC;AAAA,IACtB,UAAE;AACA,oBAAc,KAAK;AAAA,IACrB;AAAA,EACF,GAAG,CAAC,OAAO,kBAAkB,MAAM,CAAC;AAEpC,EAAAC,WAAU,MAAM;AACd,eAAW;AAEX,UAAM,WAAW,YAAY,MAAM;AACjC,iBAAW;AAAA,IACb,GAAG,eAAe;AAElB,WAAO,MAAM,cAAc,QAAQ;AAAA,EACrC,GAAG,CAAC,QAAQ,iBAAiB,UAAU,CAAC;AAExC,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA,cAAc;AAAA,EAChB;AACF;;;ACzDA,SAAS,YAA6B;AACtC,SAAS,eAAe;AAEjB,SAAS,MAAM,QAAsB;AAC1C,SAAO,QAAQ,KAAK,MAAM,CAAC;AAC7B;;;ACSM,gBAAAC,MAgCA,QAAAC,aAhCA;AALN,IAAM,aAAa,CAAC,EAAE,QAAQ,UAAU,MAAuB;AAC7D,QAAM,EAAE,OAAO,WAAW,IAAI,SAAS,EAAE,OAAO,CAAC;AAEjD,MAAI,cAAc,CAAC,OAAO;AACxB,WACE,gBAAAD;AAAA,MAAC;AAAA;AAAA,QACC,WAAW;AAAA,UACT;AAAA,UACA;AAAA,QACF;AAAA,QACD;AAAA;AAAA,IAED;AAAA,EAEJ;AAEA,MAAI,CAAC,OAAO;AACV,WACE,gBAAAA;AAAA,MAAC;AAAA;AAAA,QACC,WAAW;AAAA,UACT;AAAA,UACA;AAAA,QACF;AAAA,QACD;AAAA;AAAA,IAED;AAAA,EAEJ;AAEA,SACE,gBAAAC;AAAA,IAAC;AAAA;AAAA,MACC,WAAW;AAAA,QACT;AAAA,QACA;AAAA,MACF;AAAA,MAEA;AAAA,wBAAAD,KAAC,SAAI,WAAU,kDAAiD;AAAA,QAChE,gBAAAC,MAAC,UAAK;AAAA;AAAA,UAAU,MAAM;AAAA,WAAU;AAAA;AAAA;AAAA,EAClC;AAEJ;AAEA,IAAO,sBAAQ;;;AC3BR,SAAS,0BACd,UAAsC,CAAC,GACrB;AAClB,QAAM,EAAE,SAAS,YAAY,IAAI;AACjC,QAAM,aAAa,GAAG,MAAM;AAG5B,QAAM,eAAe,MAAiC;AACpD,QAAI,OAAO,WAAW,YAAa,QAAO,CAAC;AAC3C,UAAM,SAAS,OAAO,aAAa,QAAQ,UAAU;AACrD,WAAO,SAAS,KAAK,MAAM,MAAM,IAAI,CAAC;AAAA,EACxC;AAGA,QAAM,aAAa,CAAC,WAAsC;AACxD,QAAI,OAAO,WAAW,YAAa;AACnC,WAAO,aAAa,QAAQ,YAAY,KAAK,UAAU,MAAM,CAAC;AAAA,EAChE;AAGA,QAAM,uBAAuB,CAAC,QAA4B,UAAe;AACvE,QAAI,OAAO,WAAW,YAAa;AACnC,WAAO;AAAA,MACL,IAAI,YAAY,iBAAiB;AAAA,QAC/B,QAAQ;AAAA,UACN;AAAA,UACA,KAAK;AAAA,UACL,UAAU,KAAK,UAAU,KAAK;AAAA,UAC9B,UAAU,KAAK,UAAU,KAAK;AAAA,UAC9B,KAAK,OAAO,SAAS;AAAA,UACrB,aAAa,OAAO;AAAA,QACtB;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAEA,SAAO;AAAA,IACL,cAAc,OAAO,WAAW;AAC9B,YAAM,SAAS,aAAa;AAC5B,aAAO,OAAO,MAAM,KAAK;AAAA,IAC3B;AAAA,IAEA,kBAAkB,YAAY;AAC5B,YAAM,SAAS,aAAa;AAC5B,2BAAqB,gBAAgB,MAAM;AAC3C,aAAO;AAAA,IACT;AAAA,IAEA,UAAU,OAAO,QAAQ,QAAQ,aAAa;AAC5C,YAAM,QAAmB;AAAA,QACvB,SAAS;AAAA,QACT,SAAS;AAAA,QACT,WAAW;AAAA,QACX,WAAW,KAAK,IAAI;AAAA,MACtB;AAEA,YAAM,SAAS,aAAa;AAC5B,aAAO,MAAM,IAAI;AACjB,iBAAW,MAAM;AACjB,2BAAqB,YAAY,KAAK;AAEtC,aAAO;AAAA,IACT;AAAA,IAEA,YAAY,OAAO,QAAQ,WAAW;AACpC,YAAM,SAAS,aAAa;AAC5B,YAAM,QAAQ,OAAO,MAAM;AAE3B,UAAI,CAAC,SAAU,SAAS,MAAM,YAAY,QAAS;AACjD,eAAO,OAAO,MAAM;AACpB,mBAAW,MAAM;AACjB,6BAAqB,cAAc,EAAE,QAAQ,OAAO,CAAC;AAAA,MACvD,OAAO;AACL,cAAM,IAAI,MAAM,oCAAoC;AAAA,MACtD;AAAA,IACF;AAAA,IAEA,mBAAmB,OAAO,QAAQ,QAAQ,aAAa;AACrD,YAAM,QAAmB;AAAA,QACvB,SAAS;AAAA,QACT,SAAS;AAAA,QACT,WAAW;AAAA,QACX,WAAW,KAAK,IAAI;AAAA,MACtB;AAEA,YAAM,SAAS,aAAa;AAC5B,aAAO,MAAM,IAAI;AACjB,iBAAW,MAAM;AACjB,2BAAqB,qBAAqB,KAAK;AAE/C,aAAO;AAAA,IACT;AAAA,EACF;AACF;","names":["useEffect","useState","useState","useEffect","_a","jsx","useCallback","useEffect","useRef","useState","useState","useRef","useCallback","useEffect","jsx","jsxs"]}